CREATE TABLE public.clientes
(
   id integer, 
   codigo character varying(20), 
   nome character varying(80), 
   documento character varying(20), 
   telefone character varying(20), 
   email character varying(120), 
   CONSTRAINT pk_clientes PRIMARY KEY (id)
);

CREATE TABLE public.produtos
(
   id integer, 
   codigo character varying(20), 
   nome character varying(80), 
   estoque numeric(12,5), 
   preco numeric(12,5), 
   CONSTRAINT pk_produtos PRIMARY KEY (id)
);

CREATE TABLE public.pedidos
(
   id integer, 
   numero character varying(20), 
   emissao timestamp without time zone, 
   aprovacao timestamp without time zone, 
   id_cliente integer, 
   forma_pagto character varying(60), 
   condicao_pagto character varying(60), 
   valor_total numeric(12,5), 
   desconto numeric(12,5), 
   CONSTRAINT pk_pedidos PRIMARY KEY (id), 
   CONSTRAINT fk_cliente FOREIGN KEY (id_cliente) REFERENCES public.clientes (id) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE public.pedido_itens
(
   id integer, 
   id_pedido integer, 
   id_produto integer, 
   quantidade numeric(12,5), 
   valor_unitario numeric(12,5), 
   valor_total numeric(12,5), 
   CONSTRAINT pk_pedido_itens PRIMARY KEY (id), 
   CONSTRAINT fk_produto FOREIGN KEY (id_produto) REFERENCES public.produtos (id) ON UPDATE NO ACTION ON DELETE NO ACTION, 
   CONSTRAINT fk_pedido FOREIGN KEY (id_pedido) REFERENCES public.pedidos (id) ON UPDATE NO ACTION ON DELETE CASCADE
);

CREATE SEQUENCE public.seq_clientes;

CREATE SEQUENCE public.seq_produtos;

CREATE SEQUENCE public.seq_pedidos;

CREATE SEQUENCE public.seq_pedido_itens;


CREATE FUNCTION pedido_itens_total() RETURNS trigger AS $$
    BEGIN
        IF NEW.quantidade IS NULL THEN
            RAISE EXCEPTION 'quantidade n達o pode ser nulo';
        END IF;
        IF NEW.valor_unitario IS NULL THEN
            RAISE EXCEPTION 'valor unitario n達o pode ser nulo';
        END IF;

        -- calcular o valor total
        NEW.valor_total := NEW.quantidade * NEW.valor_unitario;
        RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER pedido_itens_total BEFORE INSERT OR UPDATE ON pedido_itens
    FOR EACH ROW EXECUTE PROCEDURE pedido_itens_total();

CREATE OR REPLACE FUNCTION update_total_pedido(id_pedido integer) RETURNS void AS $$
    UPDATE pedidos SET valor_total = (SELECT SUM(i.valor_total) - COALESCE(MAX(p.desconto), 0) FROM pedidos p LEFT JOIN pedido_itens i ON (p.id = i.id_pedido) WHERE p.id = $1)
        WHERE id = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION pedido_itens_total_pedido() RETURNS trigger AS $$
    BEGIN
        IF TG_OP = 'DELETE' THEN
            IF OLD.id_pedido IS NULL THEN
                RAISE EXCEPTION 'pedido n達o pode ser nulo';
            END IF;

            -- atualizar valor total
            PERFORM update_total_pedido(OLD.id_pedido);
            RETURN NEW;
        ELSE
            IF NEW.id_pedido IS NULL THEN
                RAISE EXCEPTION 'pedido n達o pode ser nulo';
            END IF;

            -- atualizar valor total
            PERFORM update_total_pedido(NEW.id_pedido);
            RETURN NEW;
        END IF;
    END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS pedido_itens_total_pedido ON pedido_itens;

CREATE TRIGGER pedido_itens_total_pedido AFTER INSERT OR UPDATE OR DELETE ON pedido_itens
    FOR EACH ROW EXECUTE PROCEDURE pedido_itens_total_pedido();

CREATE OR REPLACE FUNCTION pedidos_total() RETURNS trigger AS $$
    DECLARE vl_total NUMERIC(12,5);
    BEGIN
        -- calcular o valor total
        SELECT SUM(valor_total) INTO vl_total FROM pedido_itens WHERE id_pedido = NEW.id;
        NEW.valor_total := vl_total - COALESCE(NEW.desconto, 0);
        RETURN NEW;
    END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS pedidos_total ON pedidos;

CREATE TRIGGER pedidos_total BEFORE UPDATE ON pedidos
    FOR EACH ROW EXECUTE PROCEDURE pedidos_total();

CREATE OR REPLACE VIEW public.totais_por_clientes AS 
 SELECT c.id,
    c.codigo,
    c.nome,
    max(p.emissao) AS ultima_compra,
    sum(p.valor_total) AS valor_total
   FROM clientes c
     LEFT JOIN pedidos p ON p.id_cliente = c.id
  GROUP BY c.id, c.codigo, c.nome;
